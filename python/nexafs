#!/usr/bin/env python
################################################################################
#
# nexafs
#
# Program to do basic nexafs data processing based on SpecsLab xy ASCII output.
#
################################################################################
#
# Copyright 2012 Kane O'Donnell
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
# 
# NOTES
#
#
#
################################################################################

from __future__ import division
from sys import exit
from specs_utils import check_xy, header_xy, read_xy
from pylab import plot, ion, figure, subplot, title, xlim, clf
from math import ceil
from scipy.interpolate import interp1d

import Tkinter, tkFileDialog
import csv
#import argparse

## Need to parse some optional arguments
#parser = argparse.ArgumentParser(description="Program to do basic NEXAFS data processing based on SpecsLab xy ASCII output")

### BEGIN PROGRAM EXECUTION STREAM
print "Welcome to NEXAFS!"
print ""

def plot_dsets(fig, filename, channel=0):

  # Note: Sometimes XY data doesn't have multiple channels - we test for this,
  # and if there isn't the specified channel for a given set we just plot
  # channel 0. This allows for mixed XPS and NEXAFS datasets.
  
  group = read_xy(filename)
  figure(fig.number)
  clf()
  if len(group) == 1:
    if len(group[0]) <= channel:
      plot(group[0][0][:,0], group[0][0][:,1])
    else:
      plot(group[0][channel][:,0], group[0][channel][:,1])
  else:
    for i, g in enumerate(group):
      subplot(int(ceil(len(group) / 2)), 2, i+1)
      if len(g) <= channel:
        plot(g[0][:,0], g[0][:,1])
      else:
        plot(g[channel][:,0], g[channel][:,1])
  
  return

def main_menu(fig, prompt="Please enter the name of the file you wish to process",channel=0):
  
  print prompt
  main_file = tkFileDialog.askopenfilename(title="Choose an XY file")
  print "\nThankyou. Opening file %s..." % main_file
  print ""

  is_xy = check_xy(main_file)
  if is_xy:
    print "Looks like %s is an XY file."
  else:
    print "File %s is not a SpecsLab XY file: if you are sure it is,"
    print "check that you haven't messed with the file and that your export"
    print "settings are correct."
  
  group_name, region_names, all_comments = header_xy(main_file)

  print "Input file is from the group %s" % group_name
  have_region = False
  while not have_region:
    print "Select a region to process from the following:"
    for i,r in enumerate(region_names):
      print "%d\t%s" % (i, r)
    print "p\tPlot them, I can't tell just from the region names."
    print "n\tEnter a new filename."
    print "q\tQuit."
    region = raw_input("input> ")
  
    if region == "q":
      exit(0)
    elif region == "n":
      return main_menu()
    elif region == "p":
      plot_dsets(fig, main_file,channel)
    else:
      try:
        region = int(region)
        if region < len(region_names):
          return main_file, region
        else:
          print "(nexafs.main_menu) ERROR: Unrecognized option '%s'." % region
      except ValueError:
        print "(nexafs.main_menu) ERROR: Unrecognized option '%s'." % region

def offset_menu(fig, E, I, prompt="Enter the energy range for the pre-edge:"):
  
  print prompt
  start, end = [float(x) for x in raw_input("input> ").split()]
  
  figure(fig.number)
  clf()
  subplot(111)
  plot(E,I)
  xlim([start, end])
  
  print "Enter the value you wish to use for normalization."
  return float(raw_input("input> "))
  
  
def main():
  
  #root = Tkinter.Tk()
  ion()
  main_fig = figure()
  
  # Get the file and region to process
  main_file, region = main_menu(main_fig)
  
  m = read_xy(main_file)[region]
  E = m[0][:,0]
  mI = m[0][:,1]
  mI0 = m[3][:,1]
  mIx = [x/y for x,y in zip(mI, mI0)]
  
  figure(main_fig.number)
  clf()
  main_fig.canvas.set_window_title("Raw")
  subplot(311)
  plot(E,mI)
  title("Raw hemi intensity")
  subplot(312)
  plot(E,mI0)
  title("I(0)")
  subplot(313)
  plot(E,mIx)
  title("Normalized by I(0)")

  # Deal with carbon normalization
  print "Processing region %d. Do you wish to carbon-normalize? (y/n)" % region
  c_norm = raw_input("input> ").lower()
  if c_norm == "y" or c_norm == "yes":
    norm_file, norm_region = main_menu(main_fig, "Please select a file to normalize against.",channel=2)
    print "Using region %d of %s for normalization." % (norm_region, norm_file)
    c_norm = True
    n = read_xy(norm_file)[norm_region]
    nI = interp1d(n[2][:,0], n[2][:,1]) # This line will fail if the extended channels are not present!
    nI0 = interp1d(n[3][:,0], n[3][:,1])
    nIx = [nI(x)/nI0(x) for x in E]
    I = [x/y for x,y in zip(mIx, nIx)]
    
    figure(main_fig.number)
    clf()
    main_fig.canvas.set_window_title("Carbon normalization")
    subplot(221)
    plot(E,mI)
    title("Raw hemi intensity")
    subplot(222)
    plot(E,mIx)
    title("Normalized by I(0)")
    subplot(223)
    plot(E,nIx)
    title("Carbon I/I(0)")
    subplot(224)
    plot(E, I)
    title("Normalized by carbon.")
  else:
    print "Not normalizing for carbon."
    c_norm = False
    I = mIx
    
    
  # Pre-edge offset shift.
  offset = offset_menu(main_fig, E, I)
  Ioff = [y - offset for y in I]
  
  figure(main_fig.number)
  clf()
  main_fig.canvas.set_window_title("Pre-edge offset")
  subplot(221)
  plot(E,mI)
  title("Raw hemi intensity")
  subplot(222)
  plot(E,mI0)
  title("I(0)")
  subplot(223)
  plot(E,I)
  title("Spectrum-normalized")
  subplot(224)
  plot(E, Ioff)
  title("Subtracted %f" % offset)
  
  # Post-edge offset scale
  scale = offset_menu(main_fig, E, Ioff, prompt="Enter the energy range for the post-edge")
  Iscale = [y/scale for y in Ioff]
  
  figure(main_fig.number)
  clf()
  main_fig.canvas.set_window_title("Final")
  subplot(111)
  plot(E, Iscale)
  
  # Output
  print "Do you wish to output the data? (y/n)"
  out = raw_input("input> ").lower()
  if (out == "y") or (out == "yes"):
    print "Select an output option:"
    print "0\tTab-delimited text file, processed only."
    print "1\tTab-delimited text file, all spectra."
    print "2\tCSV file, processed only."
    print "3\tCSV file, all spectra."
    out_opt = int(raw_input("input> "))
    out_file = tkFileDialog.asksaveasfilename(title="Save AS")
    
    if out_file == "":
      print "Output cancelled: exiting..."
    
    if out_opt in [0,1]:
      f = open(out_file, 'w')
      f.write("# NEXAFS output - processed and normalized\n")
      f.write("# Input file: %s\n" % main_file)
    elif out_opt in [2,3]:
      f = open(out_file, 'wb')
      fcsv = csv.writer(f) # Excel dialect standard
      fcsv.writerow(["NEXAFS output - processed and normalized"])
      fcsv.writerow(["Input file: %s" % main_file])
    if c_norm:
      f.write("# Carbon norm file: %s\n" % norm_file)
    if out_opt == 0:
      f.write("# E  I(E)\n")
      for x,y in zip(E,Iscale):
        f.write("%f    %f\n" % (x,y))
      f.close()
    elif out_opt == 1:
      if c_norm:
        f.write("# E I(raw) I(0) Ir/I0 IAu IAu0 IAu/IAu0 Icnorm I(E)\n")
        for e,ir,i0,iri0,iau,iau0,iauiau0, ic, ie in zip(E, mI, mI0, mIx,[nI(x) for x in E],[nI0(x) for x in E], nIx, I,Iscale):
          f.write("%f    %f    %f    %f    %f    %f    %f    %f    %f\n" % (e,ir,i0,iri0,iau,iau0,iauiau0,ic,ie))
      else:
        f.write("# E I(raw) I(0) Ir/I0 I(E)\n")
        for e, ir, i0, iri0,ie in zip(E,mI, mI0, mIx, Iscale):
          f.write("%f    %f    %f    %f    %f\n" % (e,ir,i0,iri0,ie))
    elif out_opt == 2:
      fcsv.writerow(["E", "I(E)"])
      for x,y in zip(E,Iscale):
        fcsv.writerow([x,y])
    elif out_opt == 3:
      if c_norm:
        fcsv.writerow(["E", "I(raw)", "I(0)", "Ir/I0", "IAu", "IAu0", "IAu/IAu0", "Icnorm", "I(E)"])
        for e,ir,i0,iri0,iau,iau0,iauiau0, ic, ie in zip(E, mI, mI0, mIx,[nI(x) for x in E],[nI0(x) for x in E], nIx, I,Iscale):
          fcsv.writerow([e, ir, i0, iri0, iau, iau0, iauiau0, ic, ie])
      else:
        fcsv.writerow(["E", "I(raw)", "I(0)", "Ir/I0", "I(E)"])
        for e, ir, i0, iri0, ie in zip(E,mI, mI0, mIx, Iscale):
          fcsv.writerow([e,ir,i0,iri0, ie])
    f.close()
      
    
  print "Press enter to quit."
  quit = raw_input("press-enter> ") 

if __name__ == "__main__":
  main()
