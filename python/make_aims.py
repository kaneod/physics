#!/usr/bin/env python
################################################################################
#
# make_aims.py
#
# Creates a standard control.in template file using a specified geometry.in 
# and species directory.
#
################################################################################
#
# Copyright 2013 Kane O'Donnell
#
#     This library is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this library.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
# 
# NOTES
#
# 1.
#
################################################################################

from __future__ import division
import argparse
import os.path
import os
import esc_lib as el

# This is the file template.
control = """
#-----------------------------------------------------------------------------------------
#
# control.in generated by make_aims.py
#
#-----------------------------------------------------------------------------------------

# Physics
xc                          pbe
charge                      0.0
spin                        none
#default_initial_moment      hund
relativistic                none

# SCF
sc_accuracy_eev             1.0e-3
sc_accuracy_rho             1.0e-5
sc_accuracy_etot            1.0e-6
sc_iter_limit               200

# Geometry optimization
#hessian_to_restart_geometry .false.
relax_geometry              bfgs 5e-3

"""

DEBUG=0

parser = argparse.ArgumentParser(description="Create FHI-aims control.in template from geometry")

parser.add_argument('inputfile', help="Input geometry.in file.")
parser.add_argument('species', help="Directory of species defaults.")
args = parser.parse_args()

geom = el.Atoms(args.inputfile, "aims,geometry")

f = open("control.in", 'w')

f.write(control)
f.close()

# check the species directory is actually a directory.
if not os.path.isdir(args.species):
  print "The path you specified for the species directory is not actually a directory!\n\nSpecies settings will not be added to the control.in file."
else:
  files = os.listdir(args.species)
  species = el.uniqify(geom.species[0])
  print "Species to search for: ", species
  for spec_file in files:
    if int(spec_file.split("_")[0]) in species:
      os.system("cat %s >> control.in" % os.path.join(args.species, spec_file))
      
